https://www.right.com.cn/forum/thread-344825-1-1.html


支持 iPv6：
1、Extra packages  --->  ipv6helper  （选定这个后下面几项自动选择了）
Network  --->  odhcp6c
Network  --->  odhcpd-ipv6only
LuCI  --->  Protocols  --->  luci-proto-ipv6
LuCI  --->  Protocols  --->  luci-proto-ppp

功能重复的：

dns：

dnscrypt-proxy（时间太长不更新，不要选，作者推荐v2版本，源码已收录但未出现在luci-app中。）

dnsforward（dns转发器，企业级。更新状态：源代码作者已经删库跑了，大家不要选了。相关问题#5777）

https-dns-proxy（支持doh访问的dns客户端，设置不好上不了网，不会操作就不要装了。）

unbound（强烈推荐，支持dot访问，可以与dnsmasq分流结合使用，屏蔽广告。网上有教程。）

nat加速：

sfe、flowoffload（二选一、推荐sfe，两个都装会刷屏。相关问题#5735）

屏蔽广告：

adguard、adblock、adbyby-plus（三选一）

网络共享：

cifsd、cifs-mount、smb（已经强制选择，无法取消，与smb4有冲突）、smb4（选了你也装不上，与smb有冲突）

只装cifsd，功能用不了就只装cifs-mount

音频：

shairplay、airplay2（装airplay2）

流量统计：

vnstat（使用libgd）、statistics（使用libgd-full）、netdata（使用libgd-full）、nlbwmon（luci-web下的带宽监控）、wrtbwmon（同nlbwmon）

vnstat有冲突建议不装（选了libgd提示被libgd-full替代装不上）

流量控制：

qos、nft-qos、sqm（三选一）

功能未知（不经常使用的软件，根据个人需求选择。没有要求请略过，避免不必要冲突。）：

cshark、bmx6、bmx7、bird1-ipv4/ipv6、olsr、ahcpd、hnet、siitwizard（配置ipv6和v4的软件、与ahcpd一样的）、simple-adblock（屏蔽广告已经提到这些。）、ss-libev（用不上）asterisk（电话服务器？不常使用的软件。）、cjdns、clamav（杀毒软件）、freifunk系列软件（看不懂可以wiki）、noddos（ddos防护软件，依赖uhttpd）、privoxy（代理软件）、squid（cdn加速）、travelmate（3g/4g网络用的软件，功能未知。）、tinyproxy、rp-pppoe-server、polipo

常用软件（必选）：

dnsmasq-full（推荐与sfe用。）

base system>busybox>networking utilitles>udhcpc和udhcpc6（取消了无法接收上游dhcp分配地址。）

network>iputils（全部选择，用于诊断网络）、iperf3（端口测速用）、ifstat和iftop（检查网络流量用）、ipset和ipset-dns（给ssr-plus用）、net-tools-route（内含ifconfig，强烈推荐）、odhcp6c（可应用在wan口和lan口，接收上游isp的ipv6地址）

luci>application>vlmcsd（用于激活windows，强烈推荐的必选软件，网上有教程。）、ssr-plus（你懂得，这里不多说了）、unbound（强烈推荐，支持dot的dns，要带anchor和control/control-setup、checkconfig（位于network>ip address names里 ）需要在libraries中选择所有以libevent2开头的运行库才行。）

有argument list too long错误的（使用action，我不知道我的实体编译少啥软件还是其他的东西不成功。）

以上是软件编译列表（包含ipv6），是有点啰嗦了，凑合看吧。

使用https可能会出现ttyd和netdata界面不显示（lienol的openwrt也是一样的）

http一切正常

以下是个性设置：基于 WR703N
1.添加一键无线
在如下位置新建一个文件，文件名为 01onoff
/target/linux/ar71xx/base-files/etc/hotplug.d/button/01onoff
内容如下：
#!/bin/sh
[ "$BUTTON" = "wps" ]&& [ "$ACTION" = "pressed" ] && {
SW=$(uci get wireless.@wifi-device[0].disabled)
[ $SW == '0' ] && uci setwireless.@wifi-device[0].disabled=1
[ $SW == '0' ] || uci setwireless.@wifi-device[0].disabled=0
wifi
}
保存后设置权限为 0777
在终端下进入 button 文件夹，然后执行 chmod 777 –R 01onoff 命令
进入文件夹命令为 cd target/linux/ar71xx… ，最前面的路径前没有‘/’符号！
2.添加 3322 DDNS 动态域名解析
/feeds/packages/net/ddns-scripts/files/usr/lib/ddns/services
添加
"3322.org" "http://[USERNAME]:[PASSWORD]@members.3322.org/dyndns/update?system=
dyndns&hostname=[DOMAIN]&myip=[IP]&wildcard=OFF"
修改配置项
/feeds/packages/net/ddns-scripts/files/etc/config/ddns
config service "myddns"
option enabled "1"
option service_name "3322.org"
option domain "xxxx.3322.org"
3.修改防火墙添加开放端口
/trunk/package/network/config/firewall/files/firewall.config
添加内容：
config 'rule'
option 'target''ACCEPT'
option '_name' 'tr'
option 'src' 'wan'
option 'proto''tcpudp'
option 'dest_port''51413'
config 'rule'
option 'target''ACCEPT'
option '_name''9091'
option 'src' 'wan'
option 'proto' 'tcp'
option 'dest_port''9091'
4.修改无线默认启动发射功率及加密
/package/mac80211/files/lib/wifi/mac80211.sh
修改内容：注意对齐,参考修改
在文件最后修改以下内容：
config wifi-device radio$devidx
option type mac80211
option channel ${channel}
option macaddr $(cat/sys/class/ieee80211/${dev}/macaddress)
option hwmode 11${mode_11n}${mode_band}
$ht_capab
# REMOVETHIS LINE TO ENABLE WIFI:
option disabled 0
option txpower 17
option htmode HT40-
option noscan 1
option country CN
config wifi-iface
option device radio$devidx
option network lan
option mode ap
option ssid OpenWrt_$(cat/sys/class/ieee80211/${dev}/macaddress|tr "[a-z]""[A-Z]"|sed 
's/://g'|cut -c7-12)
option encryption psk2 --------------------加密方式 ( option encryption none 无密
码)
option key xxxxxxxx ----------------------密码 (8 位) xxxxxxxx
EOF
devidx=$(($devidx + 1))
done
}
5.修改路由器名字和时区
/package/base-files/files/etc/config/system
修改内容：
config system
option hostname OpenWrt
option zonename Asia/Shanghai
option timezone CST-8
6.默认启动 DHCP(703n 用来当二级路由)
/trunk/package/network/services/dnsmasq/files/dhcp.conf
config dhcp lan
option interface lan
option start 100
option limit 150
option leasetime 12h
option ignore 0 -----------------添加这个
7.修改 Transmission 配置文件
/feeds/packages/net/transmission/files/transmission.config
修改内容：
option rpc_authentication_required true
option umask 0
8.修改 network 配置，配置成二级路由
/trunk/package/base-files/files/etc/config/network
修改内容：
# Copyright (C) 2006 OpenWrt.org
config interface loopback
option ifname lo
option proto static
option ipaddr 127.0.0.1
option netmask 255.0.0.0
config interface lan
option type bridge
option proto static
option ipaddr 192.168.3.1
option netmask 255.255.255.0
config interface wan
option ifname eth0
option _orig_ifname eth0
option _orig_bridge false
option proto dhcp
9. 添加利用 reset 键的一键切换路由工作模式
在如下位置新建 4 个文件，在保存后，请修改权限为 777 
/target/linux/ar71xx/base-files/etc/hotplug.d/button/00-button
./etc/functions.sh
do_button () {
local button
local action
local handler
local min
local max
config_get button $1 button
config_get action $1 action
config_get handler $1 handler
config_get min $1 min
config_get max $1 max
[ "$ACTION" = "$action" -a "$BUTTON" = "$button" -a -n "$handler" ] && {
[ -z "$min" -o -z "$max" ] && eval $handler
[ -n "$min" -a -n "$max" ] && {
[ $min -le $SEEN -a $max -ge $SEEN ] && eval $handler
}
}
}
config_load system
config_foreach do_button button
/target/linux/ar71xx/base-files/etc/hotplug.d/button/change2ap
#!/bin/sh
uci delete network.wan
uci delete network.lan
uci set network.lan=interface
uci set network.lan.ifname=eth0
uci set network.lan.type=bridge
uci set network.lan.proto=static
uci set network.lan.ipaddr=192.168.1.2
uci set network.lan.netmask=255.255.255.0
uci set network.lan.gateway=192.168.1.1
uci set network.lan.dns=192.168.1.1
uci commit network
uci set dhcp.lan.ignore=1
uci commit dhcp
reboot 
/target/linux/ar71xx/base-files/etc/hotplug.d/button/change23dhcp
#!/bin/sh
uci delete network.wan
uci delete network.lan
uci set network.lan=interface
uci set network.lan.type=bridge
uci set network.lan.proto=static
uci set network.lan.ipaddr=192.168.10.1
uci set network.lan.netmask=255.255.255.0
uci set network.wan=interface
uci set network.wan.ifname=eth0
uci set network.wan.proto=dhcp
uci set network.wan._orig_ifname=eth0
uci set network.wan._orig_bridge=false
uci commit network
uci delete dhcp.lan.ignore
uci commit dhcp
reboot 
/target/linux/ar71xx/base-files/etc/hotplug.d/button/change23g
#!/bin/sh
uci delete network.wan
uci delete network.lan
uci set network.lan=interface
uci set network.lan.ifname=eth0
uci set network.lan.type=bridge
uci set network.lan.proto=static
uci set network.lan.ipaddr=192.168.1.1
uci set network.lan.netmask=255.255.255.0
uci set network.wan=interface
uci set network.wan.ifname=ppp0
uci set network.wan.proto=3g
uci set network.wan.maxwait=0
uci set network.wan.service=evdo
uci set network.wan.device=/dev/ttyUSB0
uci set network.wan.username=ctnet@mycdma.cn
uci set network.wan.password=vnet.mobi
uci set network.wan.auto=1
uci commit network
uci delete dhcp.lan.ignore
uci commit dhcp
reboot 
修改/package/base-files/files/etc/config/system，在尾部添加
config button
option button 'reset'
option action 'released'
option handler '/etc/hotplug.d/button/change23g'
option min '0'
option max '2'
config button
option button 'reset'
option action 'released'
option handler '/etc/hotplug.d/button/change2ap'
option min '3'
option max '8'
config button
option button 'reset'
option action 'released'
option handler '/etc/hotplug.d/button/change2dhcp'
option min '9'
option max '99'
这样以后按住 reset 2 秒内， 3-8 秒 和 9 秒以上，会自动切换到对应的网络配置，并自动重启路由器。
按住 reset0-2 秒放开，切换到 3g 配置，
按住 reset3-8 秒放开，切换到 ap 模式，
reset 9 秒以上放开，切换到二级路由 dhcp 模式。
10. 修改挂载点
路径：./openwrt/trunk/package/block-mount/files
修改 10-swap, 20-fsck, 40-mount 的权限为 777 
11.添加对中文编码 cp936 的支持,openwrt 实际上是支持 cp936 的，只是没开放而已
修改文件 openwrt/trunk/package/kernel/modules/nls.mk
在文件尾部添加
define KernelPackage/nls-cp936
 SUBMENU:=Native Language Support
 TITLE:=Codepage 936 (China)
 KCONFIG:=CONFIG_NLS_CODEPAGE_936
 FILES:=$(LINUX_DIR)/fs/nls/nls_cp936.ko
 AUTOLOAD:=$(call AutoLoad,25,nls_cp936)
 $(call AddDepends/nls)
endef
define KernelPackage/nls-cp936/description
 Kernel module for NLS Codepage 936 (Chinese)
endef
$(eval $(call KernelPackage,nls-cp936))
保存,这样在以后执行 make menuconfig 时，
在 Kernel modules ---> Native Language Support 下面会多一个
< > kmod-nls-cp936................ Codepage 936 (china) (NEW) 
12. 8m 固件支持（新版本）
tools/firmware-utils/src/mktplinkfw.c 中代码:
static struct flash_layout layouts[] = {
{
.id = "4M",
.fw_max_len = 0x3c0000,
.kernel_la = 0x80060000,
.kernel_ep = 0x80060000,
.rootfs_ofs = 0x140000,
}, {
.id = "4Mlzma",
.fw_max_len = 0x3c0000,
.kernel_la = 0x80060000,
.kernel_ep = 0x80060000,
.rootfs_ofs = 0x100000,
}, {
.id = "8M",
.fw_max_len = 0x7c0000,
.kernel_la = 0x80060000,
.kernel_ep = 0x80060000,
.rootfs_ofs = 0x140000,
}, {
.id = "8Mlzma",
.fw_max_len = 0x7c0000,
.kernel_la = 0x80060000,
.kernel_ep = 0x80060000,
.rootfs_ofs = 0x100000,
}, {
/* terminating entry */
}
};
static struct board_info boards[] = {
}, {
.id = "TL-WR703Nv1",
.hw_id = HWID_TL_WR703N_V1,
.hw_rev = 1,
.layout_id = "4Mlzma", //只改此, 8Mlzma
}, {
}
13. Luci 主题修改 
编辑 ./feeds/luci/modules/luci-base/root/etc/config/luci 
默认主题：option mediaurlbase /luci-static/bootstrap 
默认语言：option lang zh-cn 
 
14. Luci 页面文字修改 
编辑 ./feeds/luci/modules/luci-base/po/zh-cn/base.po 

大雕编译教程：

注意：
1. 不要用 root 用户 git 和编译！！！
2. 国内用户编译前最好准备好梯子
3. 默认登陆IP 192.168.1.1, 密码 password

编译命令如下:

1. 首先装好 Ubuntu 64bit，推荐  Ubuntu  14 LTS x64
http://releases.ubuntu.com/14.04.5/ubuntu-14.04.5-desktop-amd64.iso

2. 命令行输入 sudo apt-get update ，然后输入
sudo apt-get install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils 

3. git clone https://github.com/coolsnowwolf/lede 命令下载好源代码，然后 cd lede 进入目录

4. ./scripts/feeds update -a 
   ./scripts/feeds install -a
   make menuconfig 

5. 最后选好你要的路由，输入 make -j1 V=s （-j1后面是线程数。第一次编译推荐用单线程，国内请尽量全局科学上网）即可开始编译你要的固件了。

————————————————————————————
虚拟机安装Vmtools和SSH：
sudo apt-get update
sudo apt-get install openssh-serve open-vm-tools-desktop -y
sudo reboot

以后二次编译：
cd lede                                                          进入LEDE目录
git pull                                                         同步更新大雕源码
./scripts/feeds update -a && ./scripts/feeds install -a          更新FEEDS
rm -rf ./tmp && rm -rf .config                                   清除编译配置和缓存
make menuconfig                                                  进入编译配置菜单
make -jn V=s                                                     n=线程数+1，例如4线程的I5填-j5，开始编译

编译完成后固件输出在/lede/bin/targets


建议：
编译机最好100G起步，全局梯子
编译前下载好DL包，可大量缩减首次编译时间
此DL包，不定期更新，可编译X64固件
链接: https://pan.baidu.com/s/1dy4L8b775NRCApd8mXZ9Cg 密码: mjdl

以下操作请把mj替换为自己的用户名

DL：
WINSCP上传dl.tgz放进/home/mj 目录下，右键-文件自定义命令-Untar/Gzip，直接回车，解压出DL文件夹后，执行以下命令
ln -s /home/mj/dl /home/mj/lede                                 如果存在/home/mj/lede/dl目录，请删除

涡轮增雕法：
WINSCP上传lean.tgz放进/home/mj 目录下，右键-文件自定义命令-Untar/Gzip，直接回车，解压出lean文件夹后，执行以下命令
ln -s /home/mj/lean /home/mj/lede/package/openwrt-packages
这样编译就会加载/package/lean和/package/openwrt-packages，如果软件包同名openwrt-packages优先级低
使用涡轮增雕法，可把大雕删除的软件打包回去编译，目前大部分源码已重新添加，不需要的忽略



编译切换内核：
打开LEDE目录/target/linux/架构/Makefile
KERNEL_PATCHVER:=4.9
具体支持内核版本
include/kernel-version.mk

源码回退：
git log                        查看源码更新日志
git reset --hard HEAD^         回退到上个版本
git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前
git reset --hard commit_id     退到/进到 指定commit的sha码（可到大雕源码地址直接查询）

files大法：就是把你 改好的配置 直接编译进固件
这样做的好处就是升级不需要保留配置，或者恢复出厂设置，缺省值就是你自己设置好的配置
固化某配置教程例子：
1.提取路由固件下的\etc\config\network
2.在编译机LEDE根目录下创建files目录
3.拷贝到\files\etc\config\network
这样编译完，network就是你自己配置好的network，注意提取的文件路径和权限要一致
